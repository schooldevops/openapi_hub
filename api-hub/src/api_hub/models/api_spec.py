# coding: utf-8

"""
    Open API Hub API

    API specification for Open API Hub project. This API is designed to manage users, projects, project members, API specifications, and project credentials.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class APISpec(BaseModel):
    """
    APISpec
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the API specification.")
    project_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the project to which the API specification belongs.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the API specification.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the API specification.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the API specification.")
    spec_content: Optional[StrictStr] = Field(default=None, description="The content of the API specification in JSON format.")
    is_archived: Optional[StrictBool] = Field(default=None, description="Indicates whether the API specification is archived.")
    access_role: Optional[StrictStr] = Field(default=None, description="The role required to access the API.")
    created_by: Optional[StrictInt] = Field(default=None, description="The unique identifier of the user who created the API specification.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the API specification was created.")
    __properties: ClassVar[List[str]] = ["id", "project_id", "version", "title", "description", "spec_content", "is_archived", "access_role", "created_by", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of APISpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of APISpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "version": obj.get("version"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "spec_content": obj.get("spec_content"),
            "is_archived": obj.get("is_archived"),
            "access_role": obj.get("access_role"),
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at")
        })
        return _obj


