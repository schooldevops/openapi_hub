# coding: utf-8

"""
    Open API Hub API

    API specification for Open API Hub project. This API is designed to manage users, projects, project members, API specifications, and project credentials.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectMember(BaseModel):
    """
    ProjectMember
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The unique identifier for the project member.")
    project_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the project to which the member belongs.")
    user_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the user who is a member of the project.")
    member_role: Optional[StrictStr] = Field(default=None, description="The role of the member in the project.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the project member was created.")
    __properties: ClassVar[List[str]] = ["id", "project_id", "user_id", "member_role", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "user_id": obj.get("user_id"),
            "member_role": obj.get("member_role"),
            "created_at": obj.get("created_at")
        })
        return _obj


